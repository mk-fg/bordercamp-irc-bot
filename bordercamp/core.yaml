### Default (baseline) configuration parameters.
### DO NOT ever change this config, use -c commandline option instead!

modules:

  _default: # used as a base for all other sections here
    enabled: true
    type: relay # for most of them anyway
    # debug: # auto-filled from global "debug" section, if not specified

  # module_name: <-- alias name, used in "route" modules, must not start with an underscore
  #   enabled: true # disabled relays just pass stuff through, routes/channels act as /dev/null
  #   type: <-- one of: relay, channel, route
  #   name: <-- entry_point (python module) name, defaults to alias name above
  #   ... <-- all the contents will be passed as module configuration

  # "relay" modules are imported from python entry_points.
  # "channel" modules are IRC channels (usually start with '#') or nicknames.

  # "route" modules are special:
  #  they poll (or receive msg(s) from) "src" module(s) (name or list)
  #  then pass message through (each) "pipe" module (name or list)
  #   if any "pipe" returns None, message gets discarded
  #   pipes can return a list, meaning that several messages will be relayed further
  #  then pass (a copy of) message(s) to (each) "dst" module(s) (name or list)
  # Routes can have no "dst" and/or "src", in which case they can only be re-used.
  # When route is used as "src", it's "src" and "pipe" parts are
  #  prepended to the corresponding sections of the extension route.
  # When route is used as "pipe", only it's "pipe" is used.
  # When route is used as "dst", only it's "pipe" and "dst" parts are reused.
  # Thus it's possible to create arbitrary filters, static processing pipelines and multiplexing.
  # At least one "route" must be defined for configuration to make sense.

  ## Example configuration:

  # logtail:
  #   monitor: '/var/log/{messages,*.log}' # glob pattern or a list of them
  #   xattr_name: user.bordercamp.logtail.pos # used to mark "last position" in logs b/w restarts

  # pipe_syslog_clean:
  #   name: pipe_sub
  #   src: '\d{4}-\d{2}-\d{2}T(\d{2}:){2}\d{2}\+\d{2}:\d{2} (?P<channel>[\w.]+)<\d+> (?P<msg>.*)'
  #   dst: '\g<channel> \g<msg>'
  # pipe_syslog_resolve:
  #   name: pipe_resolve
  #   addr: '^[\w.]+ .*?\[(\d+|-)\]@(?P<addr>\S+): '
  #   short: true # return only first part of the hostname

  # bordercamp: # not '#bordercamp' only because it'd have to be quoted every time ;)
  #   type: channel
  #   name: '#bordercamp'

  ## Use "logtail" module to monitor logs for new lines
  ##  then process them with regexes using "pipe_sub" module
  ##  then resolve IPs found there (by regex) with  "pipe_resolve"
  ##  then pass the resulting messages to a "#bordercamp" IRC channel
  # log_report:
  #   type: route
  #   src: logtail
  #   dst: bordercamp
  #   pipe: [pipe_syslog_clean, pipe_syslog_resolve]


core:

  connection: # only one server connection is supported atm
    # twisted endpoint syntax, see twisted.internet.endpoints.html#clientFromString
    endpoint: tcp:host=localhost:port=6667

    nickname: orc
    realname: bordercamp bot
    # username:
    # password:
    # userinfo:

    reconnect: # see twisted.internet.protocol.ReconnectingClientFactory
      maxDelay: 30
      initialDelay: 1
      factor: 2
      jitter: 0.2
      # maxRetries:

    heartbeat: 60 # interval b/w pings to own hostname

  nickname_lstrip: '*?@~&%+' # various owner/mode prefixes

  # Emulate xattr module interface with simple k-v db for modules that use it
  # Can be useful if xattr manipulation is limited by permissions (e.g. read-only) or fs capabilities
  # Should be either empty/None/False or a path to shelve db (example - "xattr_emulation: /tmp/xattr.db")
  xattr_emulation: false


debug: # values here can be overidden by special CLI flags
  dry_run: false

logging: # see http://docs.python.org/library/logging.config.html
  # "custom" level means WARNING/DEBUG/NOISE, depending on CLI options
  warnings: true # capture python warnings
  version: 1
  formatters:
    basic:
      format: '%(asctime)s :: %(levelname)s :: %(name)s: %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
  handlers:
    console:
      class: logging.StreamHandler
      stream: ext://sys.stdout
      formatter: basic
      level: custom
    # file:
    #   class: logging.handlers.WatchedFileHandler
    #   filename: /var/log/harvestd.log
    #   formatter: basic
    #   encoding: utf-8
    #   level: DEBUG
  # loggers:
  #   bordercamp.relays.logtail:
  #     level: ERROR
  root:
    handlers: [console]
    level: custom
